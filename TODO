- create 404 page
- have hooks (split of logics from home.jsx it is too overwelming - bad practice)
- go through WSG - for better image and laoding perfomance (add lazy loading)
- do lighthouse tetsing and see how can website be improved better (performance)
- clean in css (have var vairbales)
- style better (more personality)
- better comments

Here's what you need to think through to build a layout switcher:

## The concept:

You need:
1. **State** to track which layout is active (grid or bento)
2. **Toggle button** to switch between layouts
3. **Conditional CSS classes** based on the state
4. **Two different CSS layouts** (you already have grid)

## Questions to answer yourself:

**1. State management:**
- What type of state do you need? (boolean? string?)
- Where should it live? (in HomePage component)
- What's the initial value?

**2. Toggle mechanism:**
- What happens when user clicks the toggle button?
- How do you change the state?

**3. Applying the layout:**
- How do you conditionally add different CSS classes to `.projects__display--box` based on state?
- Hint: Look at how you already conditionally add classes to `.inside__slider-circle`

**4. CSS structure:**
- Your grid layout already exists
- What CSS do you need for bento layout? (Look at the commented TODO in ProjectCard.css - you already started this)

## Starting point:

In HomePage.jsx, you already have:
```javascript
const [showWork, setShowWork] = useState(false);
const [selectedProject, setSelectedProject] = useState(null);
```

You need a similar pattern for layout state.

Try creating:
1. A new state for layout
2. A button that changes that state
3. Use that state to conditionally add a class name to your projects container

Start with just getting the toggle button working (clicking it changes state). Don't worry about the CSS layouts yet. Get the button and state working first, then move to styling.

What would you name this state variable? And what would be its two possible values?

Your teacher is right. Your HomePage component is handling too much:

1. Slider drag logic
2. Project selection
3. Image carousel navigation
4. Opening/closing projects
5. Background scroll prevention
6. Rendering the entire UI

This violates the **Single Responsibility Principle** - each component should do one thing.

## What you could extract:

**1. Slider logic** → Custom hook or separate component
- All the drag functions (`handleDragStart`, `handleDragMove`, `handleDragEnd`)
- The slider state (`isDragging`, `startX`, `currentX`)

**2. Project detail panel** → Separate component
- Everything in the `{selectedProject && ...}` block
- The image carousel logic
- Close functionality

**3. Projects grid** → Already a component (ProjectCard), but the mapping logic could be its own component

## Where to start:

The easiest refactor: **Extract the project detail panel into its own component**

Create `ProjectDetailPanel.jsx` and move all the detail panel logic there. Pass it:
- `selectedProject` as a prop
- `onClose` function as a prop
- The image carousel would live inside this new component

Your HomePage would become much simpler:
```javascript
{selectedProject && (
  <ProjectDetailPanel 
    project={selectedProject}
    onClose={closeProject}
  />
)}
```

But don't refactor everything tonight - you're tired. Work on the layout switcher first when you're fresh, then refactor when you notice the component getting messy. Refactoring is important but getting features working comes first when you're learning.

Does the concept of extracting the detail panel into its own component make sense?